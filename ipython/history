?
%magic
ls work/replay/database/test_night/*
ls -l work/replay/database/test_night
cd work/replay/database/test_night
ls
print Out
print _ih
.q
y
%magic
ls
ls -l
ls -la
ls --color=yes -la
y
import matplotlib
?
%magic
from biox.models import *
len(TrainClientProxy.objects.all())
len(TestClientProxy.objects.all())
reload(biox.models)
y
from biox.models import *
EnrollmentVideo.objects.count()
AuthenticationVideo.objects.count()
TestVideo.objects.count()
TestVideo.objects.all()
TrainVideo.objects.count()
DevelVideo.objects.count()
ls media/protocols/
y
cd /
cd
cd work/replay/
ls
y
ls
ls --color=yes
vim /idiap/home/aanjos/.ipython/ipythonrc
y
vim /idiap/home/aanjos/.ipython/ipythonrc
y
vim /idiap/home/aanjos/.ipython/ipythonrc
y
ipy_editors??
import ipy_editors
import ipy_completers
import ipy_completers??
ipy_completers??
ipy_completers?
y
import time
ls
import sys
vim /idiap/home/aanjos/.ipython/ipythonrc
!vim /idiap/home/aanjos/.ipython/ipythonrc
!vim /idiap/home/aanjos/.ipython/ipy_user_conf.py
vim
svn
edit test.x
edit 'test'
%edit 
edit django-biox/Makefile
vim
gvim
ls -l
svn status
ls -l
!vim /idiap/home/aanjos/.ipython/ipy_user_conf.py
ls -l
!vim /idiap/home/aanjos/.ipython/ipy_user_conf.py
%rehashx
y
cd /idiap/home/aanjos/.ipython/
ls
cat
less
cat __init__.py
cat ipy_profile_sh.py
!vim /idiap/home/aanjos/.ipython/ipy_user_conf.py
vim
gvim
grep test replay/Makefile
ll
vim /idiap/home/aanjos/.ipython/ipy_user_conf.py
la
%rehashx
la
ls -l
vim /idiap/home/aanjos/.ipython/ipythonrc
ls
ls -l
t = !ls -l
t
t = !ls
t
t[0]
print t[0]
ls -l
from biox.models import *
TestVideo.objects.count()
vim /idiap/home/aanjos/.ipython/ipythonrc
ls
from biox.models import *
t = !ls
t
if True:
    print 'Hello'
    
if True:
    print 'Hello'
    
t = !ls
t
t = !ls
t
if True:
    
from biox.models import *
TestVideo.objects.count()
print TestVideo.objects.count()
cat media/protocols/realaccess-devel.list
!sw/bin/project_start.py
from biox.models import *
x = Video.objects.all()
x
x = Video.objects.filter(purpose='authenticate')
x
x.count()
x = Video.objects.filter(purpose='enroll')
x.count()
x.model_set.all()
Model.objects.all()
Model.objects.all().delete()
from biox.models import *
c = TrainClient.objects.all()
c
c.count()
c[0].model_set
c[0].model
c[0].video_set.filter(purpose='enroll')
import .replay as x
import ..replay as x
from biox.models import *
protocol = Protocol.objects.get(id=1)
[k.client in protocol.real_train.all()]
[k.client for k in protocol.real_train.all()]
set([k.client for k in protocol.real_train.all()])
s = set([k.client for k in protocol.real_train.all()])
c = s[0]
for k in c: print k
for k in s: print k
ls -l
ls
ls -l
ls
ls -l
from chords.models import *
c = Collection.objects.get(id=1)
c
c.song.all()
c.song.all()[-1]
c.song.all()
c.song.order_by('-updated')
c.song.order_by('-updated')[0]
Song.objects.filter(collection_set__contains=1)
Song.objects.filter(collection__contains=1)
Song.objects.filter(collection__id=1)
from chords.models import *
Song.objects.order_by(bla)
Song.objects.order_by('bla')
import django.db.models.exceptions
Song.objects.order_by('bla')
from chords.models import *
Song.objects.order_by('bla')
def a(x, y):
    print kwargs
    
a(2, 3)
u = u'NÃ£o entendi'
u'<span>%s</span>' % u
u'<span>%s</span>' % u.decode('utf-8')
u'<span>%s</span>' % u.decode('latin1')
u'<span>%s</span>' % u.encode('latin1')
u'<span>%s</span>' % u.encode('utf-8')
u'<span>%s</span>' % u
unicode(u)
ls media/chords/img/unknown.jpg
from django.core.files.images import ImageFile
f = ImageFile('../chords/media/img/unknown.jpg')
f
f.open()
f = ImageFile(open('../chords/media/img/unknown.jpg', 'rb'))
f
f.height
f.width
f.close()
f
f.closed()
f.closed
f.open()
f.height
f.close()
f.height
f = ImageFile(open('../chords/media/img/unknown.jpgx', 'rb'))
f = ImageFile(open('../chords/media/css/style.css', 'rb'))
f.width
f.open()
f.closed
f.width
f.name
!screen -r
from chords.models import *
a = Artist.objects.get(id=1)
a
a.composer.count()
a.performer.count()
which grep
!which grep
!screen -r
x = a.performer.all() + a.composer.all()
Song.objects.filter(Q(composer==1) | Q(perfomer=1))
from django.db.models import Q
Song.objects.filter(Q(composer==1) | Q(perfomer=1))
Song.objects.filter(Q(wcomposer==1) | Q(perfomer=1))
Song.objects.filter(Q(wcomposer=1) | Q(perfomer=1))
Song.objects.filter(Q(composer=1) | Q(perfomer=1))
Song.objects.filter(Q(composer.id=1) | Q(perfomer.id=1))
Song.objects.filter(Q(composer__id=1) | Q(perfomer__id=1))
Song.objects.filter(Q(composer__id=1) | Q(performer__id=1))
Song.objects.filter(Q(composer=a) | Q(performer=a))
vim
gvim /Users/andre/Projects/psite/sw/lib/current/site-packages/bitrepo/templates/bitrepo/list.html ../chords/templates/chords/songs.html
!gvim /Users/andre/Projects/psite/sw/lib/current/site-packages/bitrepo/templates/bitrepo/list.html ../chords/templates/chords/songs.html
!mvim /Users/andre/Projects/psite/sw/lib/current/site-packages/bitrepo/templates/bitrepo/list.html ../chords/templates/chords/songs.html
rm -f ../chords/templates/chords/song.txt
rm -f ../chords/templates/chords/song.txt~
ls -
ls -l
from chords.models import *
s = Song.objects.get(id=1)
s.song
ls -l
import reportlab
from reportlab.lib.styles import getSampleStyleSheet
s = getSampleStyleSheet()
s
s.keys()
s['normal']
s['Normal']
s.byName()
s.byName
from reportlab.lib.styles import ParagraphStyle
ParagraphStyle.listAttrs
ParagraphStyle.listAttrs()
mystyle = ParagraphStyle()
s.byName()
s.byName
s.list
s.list()
from chords.models import *
i = Song.objects.get(id=1).items()
i
i[0].as_flowable()
x = i[0]
i = Song.objects.get(id=1).items()
from chords.models import *
i = Song.objects.get(id=1).items()
i[0].as_flowable()
i[1].as_flowable()
i
i[2].as_flowable()
i[3].as_flowable()
from chords.models import *
i = Song.objects.get(id=1).items()
i[3].as_flowable()
from chords.models import *
reload(chords.parser)
from chords.models import *
i = Song.objects.get(id=1).items()
i[3].as_flowable()
from chords.models import *
i = Song.objects.get(id=1).items()
i[3].as_flowable()
from reportlab.platypus import SimpleDocTemplate
help(SimpleDocTemplate)
from chords.models import *
i = Song.objects.get(id=1).items()
i.pdf()
i[0].pdf()
i = Song.objects.get(id=1)
i.pdf()
from chords.models import *
i = Song.objects.get(id=1)
i.pdf()
reload(Song)
from chords.models import *
i = Song.objects.get(id=1)
i.pdf()
from chords.models import *
i = Song.objects.get(id=1)
i.pdf()
ls
from chords.models import *
i = Song.objects.get(id=1).items()
i[0]
i[3].as_flowable()
p = i[3].as_flowable()
p
p.minWidth
p.minWidth()
p._fixedHeight
doc = SimpleDocTemplate(u'%s.pdf' % self.title)
    from reportlab.platypus import SimpleDocTemplate
doc = SimpleDocTemplate('bla.pdf')
doc.width
doc.height
doc.leftMargin
doc.rightMargin
doc.topMargin
doc.bottomMargin
from chords.models import *
x = Artist.objects.get(id=1)
x.image
a = x.image
a
a.file
from PIL import Image
z = Image.open(a.file)
z
z = Image.open(a)
z = Image.open(a.file)
a
a.name
z = Image.open(a.name)
z
z.format
z.size
from django.core.files.images import ImageFile
help(ImageFile)
a = x.image
a
a.closed
a.file
x.avatar
x.avatar.file
x.avatar.url
x.avatar.name
Image.open(x.image.open())
Image.open(x.image.file)
x.avatar.closed
Image.open(x.image.file)
t = Image.open(x.image.file)
x.image.close()
t
t.width
t.size
from reportlab.pdfgen import canvas
c = canvas.Canvas()
c = canvas.Canvas('bla.pdf')
c
t = c.beginText()
help(t)
s = Song.objects.get(id=1)
from chords.models import *
s = Song.objects.get(id=1)
s.updated.strftime()
s.updated.strftime('%l)
s.updated.strftime('%l')
s.updated.strftime('%m')
help(t)
from reportlab.platypus import Paragraph, XPreformatted, Spacer, CondPageBreak, PageBreak
help(PageBreak)
doc reportlab.platypus 
?reportlab.platypus 
from reportlab.pdfgen import canvas
c = canvas.Canvas('bla.pdf')
t = c.beginText()
t.getStartOfLine()
t.textOut()
t.getCode()
t.getCursor()
t.getX()
    from reportlab.platypus import SimpleDocTemplate
doc = SimpleDocTemplate('bla.pdf')
help(doc.build)
doc.pageTemplates
doc = SimpleDocTemplate('bla.pdf', onFirstPage=list, onLaterPages=list)
    from reportlab.platypus import SimpleDocTemplate
doc = SimpleDocTemplate('bla.pdf', onFirstPage=list, onLaterPages=list)
doc.pageTemplates
from reportlab.platypus import Paragraph, XPreformatted, Spacer, CondPageBreak, PageBreak
from reportlab.platypus.tableofcontents import TableOfContents
t = TableOfContents()
help(t)
!
from reportlab.platypus.tableofcontents import TableOfContents
toc = TableOfContents()
help(toc)
toc.tableStyle
toc.w
from django.http import HttpRequest
x = HttpRequest()
x.GET
x.build_absolute_uri()
from reportlab.platypus.frames import Frame
help(Frame)
!screen -r
help(Frame)
!screen -r
	:
!screen -r
from reportlab.pdfgen import canvas
c = canvas.Canvas('bla.pdf')
t = c.beginText()
!screen -r
from chords.models import *
a = Artist.objects.get(id=1)
a
a.performer.order_by('-updated')
from django.utils import translation
help(translation)
translation.check_for_language('pt-br')
translation.check_for_language('pt')
translation.check_for_language('bl')
help(translation)
from django.utils import translation
from chords.models import *
s = Song.objects.get(id=1)
s.updated
s.updated.strftime('%l')
s.updated.strftime('%L')
s.updated.strftime('%b')
s.updated.strftime('%B')
translation.activate('pt-br')
s.updated.strftime('%B')
import os
os.environ['LOCALE']
os.environ['LC_ALL']
os.environ['LANG']
os.environ['LANG'] = 'pt_BR.UTF-8'
s.updated.strftime('%B')
os.environ['LANG']
import os
os.environ['LANG']
from chords.models import *
s = Song.objects.get(id=1)
s.updated.strftime('%B')
from chords.models import *
s = Song.objects.get(id=1)
s.updated.strftime('%B')
from chords.models import *
s = Song.objects.get(id=1)
s.updated.strftime('%B')
from chords.models import *
s = Song.objects.get(id=1)
s.updated.strftime('%B')
help(LocaleMiddleware)
import locale
locale.getlocale()
!screen -r
from chords.models import *
s = Song.objects.get(id=1)
s.updated.strftime('%B')
locale.setlocale('pt')
locale.setlocale(locale.LC_ALL, 'pt'))
locale.setlocale(locale.LC_ALL, 'pt')
locale.setlocale(locale.LC_ALL, 'pt_BR')
s.updated.strftime('%B')
from django.utils import translation as T
T.get_language()
T.get_date_formats()
locale.getlocale()
locale.setlocale(locale.LC_ALL, 'de')
locale.setlocale(locale.LC_ALL, 'br')
locale.setlocale(locale.LC_ALL, 'fr')
locale.setlocale(locale.LC_ALL, 'fr-FR')
locale.setlocale(locale.LC_ALL, 'fr_FR')
locale.setlocale(locale.LC_ALL, 'pt')
locale.setlocale(locale.LC_ALL, 'pt-br')
locale.setlocale(locale.LC_ALL, 'pt_BR')
import locale
locale.normalize('en')
locale.normalize('pt')
locale.normalize('pt-br')
locale.normalize('pt_br')
from django.core.files.images import ImageFile
if = ImageFile('/Users/andre/Desktop/fundo de quintal.jpg')
ImageFile('/Users/andre/Desktop/fundo de quintal.jpg')
x = ImageFile('/Users/andre/Desktop/fundo de quintal.jpg')
x
x.open()
x = ImageFile(open('/Users/andre/Desktop/fundo de quintal.jpg', 'rb'))
x
x.width
x.height
import pkg_resources
pkg_resources.Environment('console_scripts')
z = pkg_resources.Environment('console_scripts')
z.scan()
z.python
z.obtain()
z.obtain
help(z.obtain)
z = pkg_resources.iter_entry_points('console_scripts')
for k in z: print k
k = z[0]
k = list(z)[0]
list(z)
for k in z: print k
z = pkg_resources.iter_entry_points('console_scripts')
k = list(z)[0]
k
k.name
k.parse()
k.parse
k.module_name
k[1]
t =list(z)[0]
t
z = list(pkg_resources.iter_entry_points('console_scripts'))
z
z[4]
z[4].module
z4 = z[4]
z4
z4.name
z4.module_name
z4.requiree
z4.require
z4.require()
z4.load()
t = z4.load()
t
help(t)
from django.core.urlresolvers import reverse
reverse('chords:view-song', 9)
reverse('chords:view-song', args=(9,))
reverse('chords:view-song', kwargs={'song_id': 9})
import urllib
import urllib2
url = 'http://localhost:8080/music/translate'
values = {'song': 'My test'}
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
url = 'http://localhost:8080/music/translate/'
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
response.msg
response.read()
f = open('test.top', 'rt').read().split()
f
f = list(open('test.top', 'rt').readlines())
f
vim django-chords/chords/views.py
f
f = open('test.top', 'rt').read()
f
values = {'song': f}
values
data = urllib.urlencode(values)
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
reponse.read()
response.read()
k = response.read()
k
k = "{sot}\nIntro:  C F C G (2x)\n{eot}\n\nQuan[C]do oiei a terra a[C7]rdendo[F]\nCom a fogueir[C]a de S\xc3\xa3o[G] Jo\xc3\xa3o[C]\nEu pergunte[C7]i a Deus do c\xc3\xa9u, ai[F][Fm]\nPor qu\xc3\xaa tamanha j[G]udia\xc3\xa7\xc3\xa3o[C]\nQue braseiro, que for[C7]naia[F]\nNem um p\xc3\xa9 de pra[C]nta\xc3\xa7\xc3\xa3o[G][C]\nPor farta d'\xc3\xa1gua[C7] perdi meu gado[F][Fm]\nMorreu de sede, me[G]u alaz\xc3\xa3o[C]\nInt\xc3\xa9 m[C]esmo a asa bra[C7]nca[F]\nBateu[C] asas [G]do sert\xc3\xa3[C]o\nEntonce eu disse, a[C7]deus Rosinha[F]\nGu[Fm]arda contigo [G]meu cora\xc3\xa7\xc3\xa3o[C]\nHoje longe muitas l[C7]\xc3\xa9guas[F]\nNuma triste [C]solid\xc3\xa3o[G][C]\nEspero a chuva cai[C7]r de novo[F][Fm]\nPra mim vort\xc3\xa1 pro[G] meu sert\xc3\xa3o[C]\nQuando o verde dos teus \xc3\xb3[C7]io[F]\nSe espai\xc3\xa1[C] na prant[G]a\xc3\xa7\xc3\xa3o[C]\nEu te assegur[C7]o, num chore n\xc3\xa3o, vi[F]u?[Fm]\nQue eu vortarei[G], viu, meu cora\xc3\xa7\xc3\xa3o[C]\n"
k.encode('utf-8')
k.encode('latin-1')
k.decode('latin-1')
k.decode('utf-8')
print k.decode('utf-8')
from chords.models import *
Song.user
Song.items
Song._meta.get_field_by_name('song')
Song._meta.get_field_by_name('song').help_text
Song._meta.get_field_by_name('song')[0].help_text
